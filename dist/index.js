import Exchange from "./internal/Exchange";
import Queue, { ConsumMode } from "./internal/Queue";
import Consumer from "./internal/Consumer";
import News from "./internal/News";
import Logs from "./internal/Logs";
import UNodeMQ, { createUnmq, createQuickUnmq, QuickUNodeMQ } from "./core/UNodeMQ";
export default UNodeMQ;
export { createUnmq, createQuickUnmq, QuickUNodeMQ };
export { Exchange, Queue, Consumer, News, Logs };
export { ConsumMode };
export const extend = Object.assign;
export const objectToString = Object.prototype.toString;
export const toTypeString = (value) => objectToString.call(value);
export const isArray = Array.isArray;
export const isMap = (val) => toTypeString(val) === "[object Map]";
export const isSet = (val) => toTypeString(val) === "[object Set]";
export const isDate = (val) => val instanceof Date;
export const isFunction = (val) => typeof val === "function";
export const isString = (val) => typeof val === "string";
export const isNumber = (val) => typeof val === "number";
export const isBoolean = (val) => typeof val === "boolean";
export const isSymbol = (val) => typeof val === "symbol";
export const isObject = (val) => val !== null && typeof val === "object";
export const isPromise = (val) => {
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
